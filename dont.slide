# Don't do this!
Stupid things you can do with golang

Mihail Mikov
25.03.2025

## defer

Deffered functions are executed in **reverse** order.
Also everything after the `;` isn't actually deffered

.play -edit ./examples/defer.go /^func x1/, HLxxx

## abusing panic/recover

.play -edit ./examples/abuse_panic.go /^func ClimbAllPanicRecover/,

##

.image ./images/context.jpg

## leaky sentinel errors

Sentinel errors aren't bad, but can cause leaky abstractions

.play -edit ./examples/errors.go 8,

##

.image ./images/leaky-errors.png

## special errors

This is a great pattern in theory. Unfortunately, go insists on making it harder...

.play -edit ./examples/special_error.go /^func main/,

## functional go

Adopting a functional style in go is possible, but is it desirable?

```go
RunPipe(3*time.Second, func(ctx context.Context, _ func()) {
  urls := FromFile(ctx, "user_urls.txt")
  bodies := Parallel(ctx, urls, 10, request)
  parsed := Parallel(ctx, bodies, 3, parseJSON)
  admins := Filter(ctx, parsed, isAdmin)
  entries := Map(ctx, admins, toJSON)
  err := ToFile(ctx, entries, "admins.txt")
	if err != nil {
      return err
	}
})
```

Short answer: no.

The operators variety would get so broad reading any code would require an immense amount of knowledge.

##

.image ./images/functional.png

## nested iterators

This doesn't look so bad, right?

.play -edit ./examples/nested_iterators.go /^func main/,

## nested iterators: implementation

until you look under the hood ðŸ˜±

.code ./examples/nested_iterators.go /^func nestedIterator/,/^}/ HLxxx

##

.image ./images/monads.png

## when all you know is a ðŸ”¨

not verbatim, but I've seen a lot of similar slice walking to get to a value

.play -edit ./examples/map_lookup.go /^func main/,

##

.image ./images/slices-hammer.png

## floats

As with any language that uses the IEEE 754, floats are "fun"

.play -edit ./examples/floats.go

## callable structs?!

Just calling some methods on a struct, nothing to see here.. wait, wat?!

.play -edit ./examples/func_with_methods.go /^func main/, HLxxx

## funcs with methods

Who would do this? (any why?!)

.play -edit ./examples/func_with_methods.go /^type ImAStructTrustMe/,

## nil by default

It's pretty easy to forget to initialize a `map`, `slice` or `chan`

.play -edit ./examples/nil_by_default.go

Especially since other values are initialized by default

.play -edit ./examples/ok_by_default.go /^type/,

##

.image ./images/nil-fine.png

## easy race

This should return 200 every time, right? **right?!**

.play -edit ./examples/race.go /^func main/,

## easy race: internals

This seems correct...

.code ./examples/race.go /^type/,24

## easy race: what is actually going on

While this pattern is common in other languages (hi, Java). It doesn't really work in go

```go
v := myInt.Val()
v += 1 // ðŸ˜±ðŸ˜±ðŸ˜±
myInt.SetVal(v)
```

##

.image ./images/java-in-go.png

## slices

Slices are **pointers** to the underlying data

.play -edit ./examples/slices.go /^func main/,

## structural typing for structs

Structural typing seems a bit inconsistent...

.play -edit ./examples/struct_typing.go /^type/,

## union types?!

No, this is just a way to define type constraints for generics

.play -edit ./examples/union.go

## Useful links & sources

- [Why not "functional" go](https://blogtitle.github.io/lets-go-to-go2/)
- [Sneaky race conditions with locks](https://blogtitle.github.io/sneaky-race-conditions-and-granular-locks/)
- [Slices gotchas](https://blogtitle.github.io/go-slices-gotchas/)
- [Abusing panic/recover](https://jub0bs.com/posts/2025-02-28-cost-of-panic-recover/)
- [Type constraint unions](https://github.com/golang/go/issues/45346#issuecomment-862505803)

##

.image ./images/logging.png
